// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Picktime.Context;

#nullable disable

namespace Picktime.Migrations
{
    [DbContext(typeof(PickTimeDbContext))]
    [Migration("20250621235826_init7")]
    partial class init7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Picktime.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExpectedArrivalTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProviderServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketNumber")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Picktime.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Bank",
                            CreatedBy = "Seed",
                            CreationDate = new DateTime(2025, 6, 21, 23, 58, 25, 979, DateTimeKind.Utc).AddTicks(314),
                            Icon = "fa-solid fa-building-columns",
                            IsActive = true,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Picktime.Entities.LockUpItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LockUpTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LockUpTypeId");

                    b.ToTable("LockUpItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreationDate = new DateTime(2025, 6, 22, 2, 58, 25, 979, DateTimeKind.Local).AddTicks(290),
                            Discount = 0.1f,
                            IsActive = true,
                            LockUpTypeId = 1,
                            Points = 100,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            CreationDate = new DateTime(2025, 6, 22, 2, 58, 25, 979, DateTimeKind.Local).AddTicks(294),
                            Discount = 0.2f,
                            IsActive = true,
                            LockUpTypeId = 1,
                            Points = 200,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            CreationDate = new DateTime(2025, 6, 22, 2, 58, 25, 979, DateTimeKind.Local).AddTicks(295),
                            Discount = 0.3f,
                            IsActive = true,
                            LockUpTypeId = 1,
                            Points = 300,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Picktime.Entities.LockUpType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LockUpType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            CreationDate = new DateTime(2025, 6, 22, 2, 58, 25, 979, DateTimeKind.Local).AddTicks(188),
                            IsActive = true,
                            Name = "Coupon",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Picktime.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedBy = "Seed",
                            CreationDate = new DateTime(2025, 6, 21, 23, 58, 25, 979, DateTimeKind.Utc).AddTicks(348),
                            Description = "Arab Bank",
                            IsActive = true,
                            Logo = "fa-solid fa-kaaba",
                            Name = "Arab Bank",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Picktime.Entities.ProviderServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("ActualEstimatedTime")
                        .HasColumnType("time");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("ExpectedEstimatedTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActualEstimatedTime = new TimeOnly(0, 1, 30),
                            CreatedBy = "Seed",
                            CreationDate = new DateTime(2025, 6, 21, 23, 58, 25, 979, DateTimeKind.Utc).AddTicks(365),
                            Description = "Service Time 1m ",
                            ExpectedEstimatedTime = new TimeOnly(0, 1, 0),
                            IsActive = true,
                            Name = "1M Service",
                            ProviderId = 1,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ActualEstimatedTime = new TimeOnly(0, 2, 0),
                            CreatedBy = "Seed",
                            CreationDate = new DateTime(2025, 6, 21, 23, 58, 25, 979, DateTimeKind.Utc).AddTicks(372),
                            Description = "Service Time 2m ",
                            ExpectedEstimatedTime = new TimeOnly(0, 2, 0),
                            IsActive = true,
                            Name = "2m Service",
                            ProviderId = 1,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ActualEstimatedTime = new TimeOnly(0, 1, 0),
                            CreatedBy = "Seed",
                            CreationDate = new DateTime(2025, 6, 21, 23, 58, 25, 979, DateTimeKind.Utc).AddTicks(374),
                            Description = "Service Time 1m ",
                            ExpectedEstimatedTime = new TimeOnly(0, 1, 0),
                            IsActive = true,
                            Name = "1m Service",
                            ProviderId = 1,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            ActualEstimatedTime = new TimeOnly(0, 1, 30),
                            CreatedBy = "Seed",
                            CreationDate = new DateTime(2025, 6, 21, 23, 58, 25, 979, DateTimeKind.Utc).AddTicks(376),
                            Description = "Service Time 2m ",
                            ExpectedEstimatedTime = new TimeOnly(0, 2, 0),
                            IsActive = true,
                            Name = "2m Service",
                            ProviderId = 1,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            ActualEstimatedTime = new TimeOnly(0, 1, 0),
                            CreatedBy = "Seed",
                            CreationDate = new DateTime(2025, 6, 21, 23, 58, 25, 979, DateTimeKind.Utc).AddTicks(378),
                            Description = "Service Time 2m ",
                            ExpectedEstimatedTime = new TimeOnly(0, 2, 0),
                            IsActive = true,
                            Name = "2m Service",
                            ProviderId = 1,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            ActualEstimatedTime = new TimeOnly(0, 1, 0),
                            CreatedBy = "Seed",
                            CreationDate = new DateTime(2025, 6, 21, 23, 58, 25, 979, DateTimeKind.Utc).AddTicks(380),
                            Description = "Service Time 2m ",
                            ExpectedEstimatedTime = new TimeOnly(0, 2, 0),
                            IsActive = true,
                            Name = "2m Service",
                            ProviderId = 1,
                            Status = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            ActualEstimatedTime = new TimeOnly(0, 1, 0),
                            CreatedBy = "Seed",
                            CreationDate = new DateTime(2025, 6, 21, 23, 58, 25, 979, DateTimeKind.Utc).AddTicks(382),
                            Description = "Service Time 2m ",
                            ExpectedEstimatedTime = new TimeOnly(0, 2, 0),
                            IsActive = true,
                            Name = "2m Service",
                            ProviderId = 1,
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            ActualEstimatedTime = new TimeOnly(0, 1, 0),
                            CreatedBy = "Seed",
                            CreationDate = new DateTime(2025, 6, 21, 23, 58, 25, 979, DateTimeKind.Utc).AddTicks(383),
                            Description = "Service Time 2m ",
                            ExpectedEstimatedTime = new TimeOnly(0, 2, 0),
                            IsActive = true,
                            Name = "2m Service",
                            ProviderId = 1,
                            Status = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Picktime.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Picktime.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerfied")
                        .HasColumnType("bit");

                    b.Property<string>("LastLoggedInDeviceAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfTry")
                        .HasColumnType("int");

                    b.Property<string>("OTPCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OTPExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("SelectedLanguage")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Picktime.Entities.UserReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderServiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderServicesId")
                        .HasColumnType("int");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ProviderServicesId");

                    b.HasIndex("UserId");

                    b.ToTable("UserReviewServices");
                });

            modelBuilder.Entity("Picktime.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Picktime.Entities.Booking", b =>
                {
                    b.HasOne("Picktime.Entities.ProviderServices", "ProviderService")
                        .WithMany("Bookings")
                        .HasForeignKey("ProviderServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Picktime.Entities.User", "Users")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProviderService");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Picktime.Entities.LockUpItems", b =>
                {
                    b.HasOne("Picktime.Entities.LockUpType", "LockUpType")
                        .WithMany("Items")
                        .HasForeignKey("LockUpTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LockUpType");
                });

            modelBuilder.Entity("Picktime.Entities.Provider", b =>
                {
                    b.HasOne("Picktime.Entities.Category", "Category")
                        .WithMany("ServiceProviders")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Picktime.Entities.ProviderServices", b =>
                {
                    b.HasOne("Picktime.Entities.Provider", "Providers")
                        .WithMany("ProviderServices")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Providers");
                });

            modelBuilder.Entity("Picktime.Entities.UserReview", b =>
                {
                    b.HasOne("Picktime.Entities.Provider", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ProviderId");

                    b.HasOne("Picktime.Entities.ProviderServices", "ProviderServices")
                        .WithMany("UserReviewServices")
                        .HasForeignKey("ProviderServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Picktime.Entities.User", "Users")
                        .WithMany("UserReviewServices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProviderServices");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Picktime.Entities.UserRole", b =>
                {
                    b.HasOne("Picktime.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Picktime.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Picktime.Entities.Category", b =>
                {
                    b.Navigation("ServiceProviders");
                });

            modelBuilder.Entity("Picktime.Entities.LockUpType", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Picktime.Entities.Provider", b =>
                {
                    b.Navigation("ProviderServices");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Picktime.Entities.ProviderServices", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("UserReviewServices");
                });

            modelBuilder.Entity("Picktime.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("UserReviewServices");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
